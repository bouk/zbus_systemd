// This file is autogenerated, do not manually edit.

use crate::zbus::proxy;

/// Proxy object for `org.freedesktop.import1.Manager`.
#[proxy(
    interface = "org.freedesktop.import1.Manager",
    gen_blocking = false,
    default_service = "org.freedesktop.import1",
    default_path = "/org/freedesktop/import1"
)]
trait Manager {
    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#ImportTar()) Call interface method `ImportTar`.
    #[zbus(name = "ImportTar")]
    fn import_tar(
        &self,
        fd: crate::zvariant::OwnedFd,
        local_name: String,
        force: bool,
        read_only: bool,
    ) -> crate::zbus::Result<(u32, crate::zvariant::OwnedObjectPath)>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#ImportRaw()) Call interface method `ImportRaw`.
    #[zbus(name = "ImportRaw")]
    fn import_raw(
        &self,
        fd: crate::zvariant::OwnedFd,
        local_name: String,
        force: bool,
        read_only: bool,
    ) -> crate::zbus::Result<(u32, crate::zvariant::OwnedObjectPath)>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#ImportFileSystem()) Call interface method `ImportFileSystem`.
    #[zbus(name = "ImportFileSystem")]
    fn import_file_system(
        &self,
        fd: crate::zvariant::OwnedFd,
        local_name: String,
        force: bool,
        read_only: bool,
    ) -> crate::zbus::Result<(u32, crate::zvariant::OwnedObjectPath)>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#ExportTar()) Call interface method `ExportTar`.
    #[zbus(name = "ExportTar")]
    fn export_tar(
        &self,
        local_name: String,
        fd: crate::zvariant::OwnedFd,
        format: String,
    ) -> crate::zbus::Result<(u32, crate::zvariant::OwnedObjectPath)>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#ExportRaw()) Call interface method `ExportRaw`.
    #[zbus(name = "ExportRaw")]
    fn export_raw(
        &self,
        local_name: String,
        fd: crate::zvariant::OwnedFd,
        format: String,
    ) -> crate::zbus::Result<(u32, crate::zvariant::OwnedObjectPath)>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#PullTar()) Call interface method `PullTar`.
    #[zbus(name = "PullTar")]
    fn pull_tar(
        &self,
        url: String,
        local_name: String,
        verify_mode: String,
        force: bool,
    ) -> crate::zbus::Result<(u32, crate::zvariant::OwnedObjectPath)>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#PullRaw()) Call interface method `PullRaw`.
    #[zbus(name = "PullRaw")]
    fn pull_raw(
        &self,
        url: String,
        local_name: String,
        verify_mode: String,
        force: bool,
    ) -> crate::zbus::Result<(u32, crate::zvariant::OwnedObjectPath)>;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#ListTransfers()) Call interface method `ListTransfers`.
    #[zbus(name = "ListTransfers")]
    fn list_transfers(
        &self,
    ) -> crate::zbus::Result<
        Vec<(
            u32,
            String,
            String,
            String,
            f64,
            crate::zvariant::OwnedObjectPath,
        )>,
    >;

    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#CancelTransfer()) Call interface method `CancelTransfer`.
    #[zbus(name = "CancelTransfer")]
    fn cancel_transfer(&self, transfer_id: u32) -> crate::zbus::Result<()>;

    /// Receive `TransferNew` signal.
    #[zbus(signal, name = "TransferNew")]
    fn transfer_new(
        &self,
        transfer_id: u32,
        transfer_path: crate::zvariant::OwnedObjectPath,
    ) -> crate::zbus::Result<()>;

    /// Receive `TransferRemoved` signal.
    #[zbus(signal, name = "TransferRemoved")]
    fn transfer_removed(
        &self,
        transfer_id: u32,
        transfer_path: crate::zvariant::OwnedObjectPath,
        result: String,
    ) -> crate::zbus::Result<()>;
}

/// Proxy object for `org.freedesktop.import1.Transfer`.
#[proxy(
    interface = "org.freedesktop.import1.Transfer",
    gen_blocking = false,
    default_service = "org.freedesktop.import1",
    assume_defaults = false
)]
trait Transfer {
    /// [ğŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#Cancel()) Call interface method `Cancel`.
    #[zbus(name = "Cancel")]
    fn cancel(&self) -> crate::zbus::Result<()>;

    /// Receive `LogMessage` signal.
    #[zbus(signal, name = "LogMessage")]
    fn log_message(&self, priority: u32, line: String) -> crate::zbus::Result<()>;

    /// Get property `Id`.
    #[zbus(property, name = "Id")]
    fn id(&self) -> crate::zbus::Result<u32>;

    /// Get property `Local`.
    #[zbus(property, name = "Local")]
    fn local(&self) -> crate::zbus::Result<String>;

    /// Get property `Remote`.
    #[zbus(property, name = "Remote")]
    fn remote(&self) -> crate::zbus::Result<String>;

    /// Get property `Verify`.
    #[zbus(property, name = "Verify")]
    fn verify(&self) -> crate::zbus::Result<String>;

    /// Get property `Progress`.
    #[zbus(property, name = "Progress")]
    fn progress(&self) -> crate::zbus::Result<f64>;
}
