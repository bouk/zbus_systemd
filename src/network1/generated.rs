// This file is autogenerated, do not manually edit.

use zbus::dbus_proxy;

/// Proxy object for `org.freedesktop.network1.Manager`.
#[dbus_proxy(
    interface = "org.freedesktop.network1.Manager",
    gen_blocking = false,
    default_service = "org.freedesktop.network1",
    default_path = "/org/freedesktop/network1"
)]
trait Manager {
    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#ListLinks()) Call interface method `ListLinks`.
    #[dbus_proxy(name = "ListLinks")]
    fn list_links(
        &self,
    ) -> crate::zbus::Result<Vec<(i32, String, crate::zvariant::OwnedObjectPath)>>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetLinkByName()) Call interface method `GetLinkByName`.
    #[dbus_proxy(name = "GetLinkByName")]
    fn get_link_by_name(
        &self,
        name: String,
    ) -> crate::zbus::Result<(i32, crate::zvariant::OwnedObjectPath)>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#GetLinkByIndex()) Call interface method `GetLinkByIndex`.
    #[dbus_proxy(name = "GetLinkByIndex")]
    fn get_link_by_index(
        &self,
        ifindex: i32,
    ) -> crate::zbus::Result<(String, crate::zvariant::OwnedObjectPath)>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkNTP()) Call interface method `SetLinkNTP`.
    #[dbus_proxy(name = "SetLinkNTP")]
    fn set_link_ntp(&self, ifindex: i32, servers: Vec<String>) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkDNS()) Call interface method `SetLinkDNS`.
    #[dbus_proxy(name = "SetLinkDNS")]
    fn set_link_dns(&self, ifindex: i32, addresses: Vec<(i32, Vec<u8>)>)
        -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkDNSEx()) Call interface method `SetLinkDNSEx`.
    #[dbus_proxy(name = "SetLinkDNSEx")]
    fn set_link_dns_ex(
        &self,
        ifindex: i32,
        addresses: Vec<(i32, Vec<u8>, u16, String)>,
    ) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkDomains()) Call interface method `SetLinkDomains`.
    #[dbus_proxy(name = "SetLinkDomains")]
    fn set_link_domains(
        &self,
        ifindex: i32,
        domains: Vec<(String, bool)>,
    ) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkDefaultRoute()) Call interface method `SetLinkDefaultRoute`.
    #[dbus_proxy(name = "SetLinkDefaultRoute")]
    fn set_link_default_route(&self, ifindex: i32, enable: bool) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkLLMNR()) Call interface method `SetLinkLLMNR`.
    #[dbus_proxy(name = "SetLinkLLMNR")]
    fn set_link_llmnr(&self, ifindex: i32, mode: String) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkMulticastDNS()) Call interface method `SetLinkMulticastDNS`.
    #[dbus_proxy(name = "SetLinkMulticastDNS")]
    fn set_link_multicast_dns(&self, ifindex: i32, mode: String) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkDNSOverTLS()) Call interface method `SetLinkDNSOverTLS`.
    #[dbus_proxy(name = "SetLinkDNSOverTLS")]
    fn set_link_dns_over_tls(&self, ifindex: i32, mode: String) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkDNSSEC()) Call interface method `SetLinkDNSSEC`.
    #[dbus_proxy(name = "SetLinkDNSSEC")]
    fn set_link_dnssec(&self, ifindex: i32, mode: String) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLinkDNSSECNegativeTrustAnchors()) Call interface method `SetLinkDNSSECNegativeTrustAnchors`.
    #[dbus_proxy(name = "SetLinkDNSSECNegativeTrustAnchors")]
    fn set_link_dnssec_negative_trust_anchors(
        &self,
        ifindex: i32,
        names: Vec<String>,
    ) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#RevertLinkNTP()) Call interface method `RevertLinkNTP`.
    #[dbus_proxy(name = "RevertLinkNTP")]
    fn revert_link_ntp(&self, ifindex: i32) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#RevertLinkDNS()) Call interface method `RevertLinkDNS`.
    #[dbus_proxy(name = "RevertLinkDNS")]
    fn revert_link_dns(&self, ifindex: i32) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#RenewLink()) Call interface method `RenewLink`.
    #[dbus_proxy(name = "RenewLink")]
    fn renew_link(&self, ifindex: i32) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#ForceRenewLink()) Call interface method `ForceRenewLink`.
    #[dbus_proxy(name = "ForceRenewLink")]
    fn force_renew_link(&self, ifindex: i32) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#ReconfigureLink()) Call interface method `ReconfigureLink`.
    #[dbus_proxy(name = "ReconfigureLink")]
    fn reconfigure_link(&self, ifindex: i32) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#Reload()) Call interface method `Reload`.
    #[dbus_proxy(name = "Reload")]
    fn reload(&self) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#DescribeLink()) Call interface method `DescribeLink`.
    #[dbus_proxy(name = "DescribeLink")]
    fn describe_link(&self, ifindex: i32) -> crate::zbus::Result<String>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#Describe()) Call interface method `Describe`.
    #[dbus_proxy(name = "Describe")]
    fn describe(&self) -> crate::zbus::Result<String>;

    /// Get property `OperationalState`.
    #[dbus_proxy(property, name = "OperationalState")]
    fn operational_state(&self) -> crate::zbus::Result<String>;

    /// Get property `CarrierState`.
    #[dbus_proxy(property, name = "CarrierState")]
    fn carrier_state(&self) -> crate::zbus::Result<String>;

    /// Get property `AddressState`.
    #[dbus_proxy(property, name = "AddressState")]
    fn address_state(&self) -> crate::zbus::Result<String>;

    /// Get property `IPv4AddressState`.
    #[dbus_proxy(property, name = "IPv4AddressState")]
    fn i_pv4_address_state(&self) -> crate::zbus::Result<String>;

    /// Get property `IPv6AddressState`.
    #[dbus_proxy(property, name = "IPv6AddressState")]
    fn i_pv6_address_state(&self) -> crate::zbus::Result<String>;

    /// Get property `OnlineState`.
    #[dbus_proxy(property, name = "OnlineState")]
    fn online_state(&self) -> crate::zbus::Result<String>;

    /// Get property `NamespaceId`.
    #[dbus_proxy(property, name = "NamespaceId")]
    fn namespace_id(&self) -> crate::zbus::Result<u64>;
}

/// Proxy object for `org.freedesktop.network1.Link`.
#[dbus_proxy(
    interface = "org.freedesktop.network1.Link",
    gen_blocking = false,
    default_service = "org.freedesktop.network1",
    assume_defaults = false
)]
trait Link {
    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetNTP()) Call interface method `SetNTP`.
    #[dbus_proxy(name = "SetNTP")]
    fn set_ntp(&self, servers: Vec<String>) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetDNS()) Call interface method `SetDNS`.
    #[dbus_proxy(name = "SetDNS")]
    fn set_dns(&self, addresses: Vec<(i32, Vec<u8>)>) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetDNSEx()) Call interface method `SetDNSEx`.
    #[dbus_proxy(name = "SetDNSEx")]
    fn set_dns_ex(&self, addresses: Vec<(i32, Vec<u8>, u16, String)>) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetDomains()) Call interface method `SetDomains`.
    #[dbus_proxy(name = "SetDomains")]
    fn set_domains(&self, domains: Vec<(String, bool)>) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetDefaultRoute()) Call interface method `SetDefaultRoute`.
    #[dbus_proxy(name = "SetDefaultRoute")]
    fn set_default_route(&self, enable: bool) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetLLMNR()) Call interface method `SetLLMNR`.
    #[dbus_proxy(name = "SetLLMNR")]
    fn set_llmnr(&self, mode: String) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetMulticastDNS()) Call interface method `SetMulticastDNS`.
    #[dbus_proxy(name = "SetMulticastDNS")]
    fn set_multicast_dns(&self, mode: String) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetDNSOverTLS()) Call interface method `SetDNSOverTLS`.
    #[dbus_proxy(name = "SetDNSOverTLS")]
    fn set_dns_over_tls(&self, mode: String) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetDNSSEC()) Call interface method `SetDNSSEC`.
    #[dbus_proxy(name = "SetDNSSEC")]
    fn set_dnssec(&self, mode: String) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#SetDNSSECNegativeTrustAnchors()) Call interface method `SetDNSSECNegativeTrustAnchors`.
    #[dbus_proxy(name = "SetDNSSECNegativeTrustAnchors")]
    fn set_dnssec_negative_trust_anchors(&self, names: Vec<String>) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#RevertNTP()) Call interface method `RevertNTP`.
    #[dbus_proxy(name = "RevertNTP")]
    fn revert_ntp(&self) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#RevertDNS()) Call interface method `RevertDNS`.
    #[dbus_proxy(name = "RevertDNS")]
    fn revert_dns(&self) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#Renew()) Call interface method `Renew`.
    #[dbus_proxy(name = "Renew")]
    fn renew(&self) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#ForceRenew()) Call interface method `ForceRenew`.
    #[dbus_proxy(name = "ForceRenew")]
    fn force_renew(&self) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#Reconfigure()) Call interface method `Reconfigure`.
    #[dbus_proxy(name = "Reconfigure")]
    fn reconfigure(&self) -> crate::zbus::Result<()>;

    /// [ðŸ“–](https://www.freedesktop.org/software/systemd/man/systemd.directives.html#Describe()) Call interface method `Describe`.
    #[dbus_proxy(name = "Describe")]
    fn describe(&self) -> crate::zbus::Result<String>;

    /// Get property `OperationalState`.
    #[dbus_proxy(property, name = "OperationalState")]
    fn operational_state(&self) -> crate::zbus::Result<String>;

    /// Get property `CarrierState`.
    #[dbus_proxy(property, name = "CarrierState")]
    fn carrier_state(&self) -> crate::zbus::Result<String>;

    /// Get property `AddressState`.
    #[dbus_proxy(property, name = "AddressState")]
    fn address_state(&self) -> crate::zbus::Result<String>;

    /// Get property `IPv4AddressState`.
    #[dbus_proxy(property, name = "IPv4AddressState")]
    fn i_pv4_address_state(&self) -> crate::zbus::Result<String>;

    /// Get property `IPv6AddressState`.
    #[dbus_proxy(property, name = "IPv6AddressState")]
    fn i_pv6_address_state(&self) -> crate::zbus::Result<String>;

    /// Get property `OnlineState`.
    #[dbus_proxy(property, name = "OnlineState")]
    fn online_state(&self) -> crate::zbus::Result<String>;

    /// Get property `AdministrativeState`.
    #[dbus_proxy(property, name = "AdministrativeState")]
    fn administrative_state(&self) -> crate::zbus::Result<String>;

    /// Get property `BitRates`.
    #[dbus_proxy(property, name = "BitRates")]
    fn bit_rates(&self) -> crate::zbus::Result<(u64, u64)>;
}

/// Proxy object for `org.freedesktop.network1.Network`.
#[dbus_proxy(
    interface = "org.freedesktop.network1.Network",
    gen_blocking = false,
    default_service = "org.freedesktop.network1",
    assume_defaults = false
)]
trait Network {
    /// Get property `Description`.
    #[dbus_proxy(property, name = "Description")]
    fn description(&self) -> crate::zbus::Result<String>;

    /// Get property `SourcePath`.
    #[dbus_proxy(property, name = "SourcePath")]
    fn source_path(&self) -> crate::zbus::Result<String>;

    /// Get property `MatchMAC`.
    #[dbus_proxy(property, name = "MatchMAC")]
    fn match_mac(&self) -> crate::zbus::Result<Vec<String>>;

    /// Get property `MatchPath`.
    #[dbus_proxy(property, name = "MatchPath")]
    fn match_path(&self) -> crate::zbus::Result<Vec<String>>;

    /// Get property `MatchDriver`.
    #[dbus_proxy(property, name = "MatchDriver")]
    fn match_driver(&self) -> crate::zbus::Result<Vec<String>>;

    /// Get property `MatchType`.
    #[dbus_proxy(property, name = "MatchType")]
    fn match_type(&self) -> crate::zbus::Result<Vec<String>>;

    /// Get property `MatchName`.
    #[dbus_proxy(property, name = "MatchName")]
    fn match_name(&self) -> crate::zbus::Result<Vec<String>>;
}

/// Proxy object for `org.freedesktop.network1.DHCPServer`.
#[dbus_proxy(
    interface = "org.freedesktop.network1.DHCPServer",
    gen_blocking = false,
    default_service = "org.freedesktop.network1",
    assume_defaults = false
)]
trait DHCPServer {
    /// Get property `Leases`.
    #[dbus_proxy(property, name = "Leases")]
    fn leases(&self) -> crate::zbus::Result<Vec<(u32, Vec<u8>, Vec<u8>, Vec<u8>, Vec<u8>, u64)>>;
}

/// Proxy object for `org.freedesktop.network1.DHCPv4Client`.
#[dbus_proxy(
    interface = "org.freedesktop.network1.DHCPv4Client",
    gen_blocking = false,
    default_service = "org.freedesktop.network1",
    assume_defaults = false
)]
trait DHCPv4Client {
    /// Get property `State`.
    #[dbus_proxy(property, name = "State")]
    fn state(&self) -> crate::zbus::Result<String>;
}

/// Proxy object for `org.freedesktop.network1.DHCPv6Client`.
#[dbus_proxy(
    interface = "org.freedesktop.network1.DHCPv6Client",
    gen_blocking = false,
    default_service = "org.freedesktop.network1",
    assume_defaults = false
)]
trait DHCPv6Client {
    /// Get property `State`.
    #[dbus_proxy(property, name = "State")]
    fn state(&self) -> crate::zbus::Result<String>;
}
